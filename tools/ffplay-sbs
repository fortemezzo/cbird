#!/bin/bash
#  Play two videos side-by-side using ffmpeg/ffprobe/ffplay
#  Copyright (C) 2023 scrubbbbs
#  Contact: screubbbebs@gemeaile.com =~ s/e//g
#  Project: https://github.com/scrubbbbs/cbird

#  This file is part of cbird.

#  cbird is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation; either
#  version 2 of the License, or (at your option) any later version.
#
#  cbird is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public
#  License along with cbird; if not, see
#  <https://www.gnu.org/licenses/>.
##
# ffplay-sbs
# args: file1,seek1,file2,seek2 or file1,file2
#
# Each video is seeked to a pipe, as is the audio.
# This works well but the downside is you cannot
# seek in the player.
#
# Both audio streams are present, press "a" to
# cycle audio track between left/right
#
prog=$0

if [ $# -lt 4 ]; then
  file1="$1"
  file2="$2"
  seek1=0
  seek2=0
else
  file1="$1"
  seek1="$2"
  file2="$3"
  seek2="$4"
fi

if [ -z $TMPDIR ]; then
  TMPDIR=/tmp
fi

echo f1: $file1
echo f2: $file2
echo s1: $seek1
echo s2: $seek2

if [ ! -f "$file1" ];  then
  echo "$file1" not accessible
  exit 1
fi

if [ ! -f "$file2" ]; then
  echo "$file2" not accessible
  exit 2
fi

# drop chars that will be a problem for drawtext
name1=$(basename "$file1" | sed -re "s/[,=:'\"]+/_/g")
name2=$(basename "$file2" | sed -re  "s/[,=:'\"]+/_/g")

echo n1: $name1
echo n2: $name2

input1=$TMPDIR/sbsLeft.avi
input2=$TMPDIR/sbsRight.avi
rm -f $input1 $input2

#ln -sf "$file1" $input1 
#ln -sf "$file2" $input2

video1=$TMPDIR/sbsLeft.y4m
video2=$TMPDIR/sbsRight.y4m
audio1=$TMPDIR/sbsLeft.wav
audio2=$TMPDIR/sbsRight.wav
info1=$TMPDIR/sbsInfo1.txt
info2=$TMPDIR/sbsInfo2.txt

rm -f $video1 $video2 $audio1 $audio2

# use fifo to transcode both videos into raw yuv streams
# seems to overcome sync issues with certain codecs
mkfifo $video1
mkfifo $video2
mkfifo $audio1
mkfifo $audio2


ffmpeg -ss "$seek1" -i "$file1" -f yuv4mpegpipe - 2>/dev/null >$video1 &
ffmpeg -ss "$seek1" -i "$file1" -f wav          -y $audio1 2>/dev/null &
ffmpeg -ss "$seek2" -i "$file2" -f yuv4mpegpipe -y $video2 2>/dev/null &
ffmpeg -ss "$seek2" -i "$file2" -f wav          -y $audio2 2>/dev/null &

ffprobe -show_streams "$file1" 2>/dev/null > $info1
ffprobe -show_streams "$file2" 2>/dev/null > $info2

parse() {
  local file="$1"
  local pattern="$2"
  echo $(cat $file | grep "$pattern" | head -n 1 | cut -d'=' -f2)
}

width_for_height() {
  local height="$1"
  local dar="$2"
  local aspect_num=$(echo $dar | cut -d':' -f1)
  local aspect_den=$(echo $dar | cut -d':' -f2)
  echo $(($ih * $aspect_num / $aspect_den));
}

height1=$(parse $info1 "^height")
height2=$(parse $info2 "^height")

echo h1: $height1
echo h2: $height2

name1="$name1 \[${height1}p\]"
name2="$name2 \[${height2}p\]"

# correct aspect ratio for non-square pixels
dar1=$(parse $info1 "^display_aspect_ratio")
dar2=$(parse $info2 "^display_aspect_ratio")

# scale input to tallest video
if [ $height1 -gt $height2 ]; then
  ih=$height1
  iw=$(width_for_height $ih $dar1)
else
  ih=$height2
  iw=$(width_for_height $ih $dar2)
fi

width1=$(width_for_height $ih $dar1)
width2=$(width_for_height $ih $dar2)

echo w1: $width1
echo w2: $width2

scale1="scale=w=$width1:h=$ih"
scale2="scale=w=$width2:h=$ih"

# center-crop each side, also sets the final output width
# make output 16:9 for wide videos, 1:1 for iphone videos
aspect=16:9
if [ $iw -gt $ih ]; then
  crop_w=$(($ih * 1777 / 1000 / 2))
else
  crop_w=$iw
fi
echo crop_w: $crop_w

# kinda resolution-independant
fontsize=$(($ih / 48))
if [ $fontsize -lt 12 ]; then
  fontsize=12
fi
echo fontsize: $fontsize


textfmt="box=1:boxcolor=black:boxborderw=5:fontsize=$fontsize:fontcolor=white:alpha=0.75"
toptext="x=w/2-text_w/2:y=10"
bottext="x=w/2-text_w/2:y=h-text_h-10"

helptext="[q]uit - [f]ullscreen - [a]udio"

ffmpeg -f lavfi -i "\
movie=$video1  [left]; \
amovie=$audio1 [out0]; \
movie=$video2  [right]; \
amovie=$audio2 [out1]; \
[right]$scale2,crop=$crop_w:$ih,drawtext=text=$name2:$toptext:$textfmt [rs];\
 [left]$scale1,crop=$crop_w:$ih,drawtext=text=$name1:$toptext:$textfmt [ls];\
[ls][rs]hstack,drawtext=text='$helptext':$bottext:$textfmt [out2]" \
-map 0:v -c:v rawvideo -aspect $aspect -map 0:a:0 -c:a pcm_s16le -map 0:a:1 -c:a pcm_s16le -f matroska -v quiet - | \
ffplay -v quiet -fs -window_title "$prog" -

rm -f $video1 $video2 $audio1 $audio2 $info1 $info2

exit

